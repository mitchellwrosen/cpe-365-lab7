package calpoly;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Charlie
 */
public class CheckAvailability extends javax.swing.JDialog
{
    private GuestPanel guestPanel;
    private int checkMon;
    private int checkDay;
    private int checkYear;
    private double highestRate;
    
    /**
     * Creates new form CheckAvailability 
     */
    public CheckAvailability(java.awt.Frame parent, boolean modal, GuestPanel panel)
    {
        super(parent, modal);
        guestPanel = panel;
        initComponents();
    }
    
    private String createDate(int numMonth, int numDay, int numYear)
    {
        String month = Integer.toString(numMonth);
        String day = Integer.toString(numDay);
        String year = Integer.toString(numYear);
        
        if (numMonth < 10)
        {
          //  month = "0" + month;
        }
                
        return "TO_DATE(" + "'"+ month + "-" + day + "-" + year + "'" + " , 'MM-DD-YYYY')";
    }
    
    private void incrementDate()
    {
        checkDay++;
        
        if (checkMon == 2 && checkDay > 28)
        {
            if (checkDay == 29  && (checkYear % 4) == 0)
            {
                return;
            }
            else
            {
                checkMon++;
                checkDay = 1;
                return;
            }
        }
                
        if ((checkMon == 1 || checkMon == 3 || checkMon == 5 || checkMon == 7
                || checkMon == 8 || checkMon == 10 || checkMon == 12)
                && checkDay == 32)
        {
            if (checkMon == 12)
            {
                checkYear++;
                checkMon = 1;
                checkDay = 1;
                return;
            }
            checkMon++;
            checkDay = 1;
            return;
        }
        
        if ((checkMon == 4 || checkMon == 6 || checkMon == 9 || checkMon == 11)
                && checkDay == 31)
        {
            checkDay = 1;
            checkMon++;
        }
    }
    
    private boolean checkInBeforeCheckOut(int checkOutMon, int checkOutDay, int checkOutYear)
    {
        if (checkMon > checkOutMon && checkYear == checkOutYear)
        {
            return false;
        }
        else if (checkDay > checkOutDay && checkMon == checkOutMon)
        {
            return false;
        }
        else if(checkYear > checkOutYear)
        {
            return false;
        }
        else if (checkMon == checkOutMon && checkYear == checkOutYear && 
                checkDay == checkOutDay)
        {
            return false;
        }
        
        return true;
    }
    
    private double getRate()
    {
        Calendar c = Calendar.getInstance();
        int dayOfWeek, dayOfMonth;
        c.set(checkYear, checkMon-1, checkDay);
        dayOfWeek = c.get(Calendar.DAY_OF_WEEK);
        dayOfMonth = c.get(Calendar.DAY_OF_MONTH);
        
        if ((dayOfMonth == 1 && checkMon == 1) || (dayOfMonth == 4 && checkMon == 7)
                || (dayOfMonth == 6 && checkMon == 9) || (dayOfMonth == 30 && checkMon == 10))
        {
            if (guestPanel.getPrice() * 1.25 > highestRate)
            {
                highestRate = guestPanel.truncateDouble(guestPanel.getPrice() * 1.25);
            }
            return (guestPanel.getPrice() * 1.25);
        }
        
        
        if(dayOfWeek == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY)
        {
            if (guestPanel.getPrice() * 1.1 > highestRate)
            {
                highestRate = guestPanel.truncateDouble(guestPanel.getPrice() * 1.1);
            }
            return (guestPanel.getPrice() * 1.1);
        }
        if (guestPanel.getPrice() > highestRate)
        {
                highestRate = guestPanel.getPrice();
        }
        return guestPanel.getPrice();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        checkInYearSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        checkOutYearSpinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        dateTable = new javax.swing.JTable();
        reservationButton = new javax.swing.JButton();
        checkInDaySpinner = new javax.swing.JSpinner();
        checkOutDaySpinner = new javax.swing.JSpinner();
        checkButton = new javax.swing.JButton();
        checkInMonthSpinner = new javax.swing.JSpinner();
        checkOutMonthSpinner = new javax.swing.JSpinner();
        validDatesLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Check Availability");

        jLabel2.setText("Check In");

        jLabel3.setText("Mon:");

        jLabel4.setText("Day:");

        jLabel5.setText("Year:");

        checkInYearSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"2009", "2010", "2011", "2012", "2013", "2014"}));

        jLabel6.setText("Check Out");

        jLabel7.setText("Mon:");

        jLabel8.setText("Day:");

        jLabel9.setText("Year:");

        checkOutYearSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"2009", "2010", "2011", "2012", "2013", "2014"}));

        dateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String []
            {
                "Date", "Available", "Rate"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        dateTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(dateTable);
        dateTable.getColumnModel().getColumn(0).setResizable(false);
        dateTable.getColumnModel().getColumn(1).setResizable(false);
        dateTable.getColumnModel().getColumn(2).setResizable(false);

        reservationButton.setText("Place Reservation!");
        reservationButton.setEnabled(false);
        reservationButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                reservationButtonActionPerformed(evt);
            }
        });

        checkInDaySpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));

        checkOutDaySpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));

        checkButton.setText("Check Dates");
        checkButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkButtonActionPerformed(evt);
            }
        });

        checkInMonthSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));

        checkOutMonthSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));

        validDatesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(checkInYearSpinner)
                                    .addComponent(checkInDaySpinner)
                                    .addComponent(checkInMonthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reservationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(validDatesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(checkOutYearSpinner)
                                    .addComponent(checkOutDaySpinner)
                                    .addComponent(checkOutMonthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel6)))))
                .addGap(44, 44, 44))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(checkInMonthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(validDatesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(checkInDaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(checkInYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(checkOutMonthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(checkOutDaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(checkOutYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)))
                .addComponent(reservationButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        reservationButton.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkButtonActionPerformed
    {//GEN-HEADEREND:event_checkButtonActionPerformed
        boolean setReservation = true;
        
        int checkInMon = (Integer)checkInMonthSpinner.getValue();
        int checkInDay = (Integer)checkInDaySpinner.getValue();
        int checkInYear = Integer.parseInt((String)checkInYearSpinner.getValue());
        int checkOutMon = (Integer)checkOutMonthSpinner.getValue();
        int checkOutDay = (Integer)checkOutDaySpinner.getValue();
        int checkOutYear = Integer.parseInt((String)checkOutYearSpinner.getValue());
        highestRate = 0;
        
        final DefaultTableModel model = (DefaultTableModel)dateTable.getModel();
        model.setRowCount(0);

        checkMon = checkInMon;
        checkDay = checkInDay;
        checkYear = checkInYear;
        
        if (!checkInBeforeCheckOut(checkOutMon, checkOutDay, checkOutYear))
        {
            validDatesLabel.setText("Check-out must be after check-in.");
            reservationButton.setEnabled(false);
            return;
        }
        
        if (!guestPanel.checkDates(checkInMon, checkInDay, checkInYear, validDatesLabel)
            || !guestPanel.checkDates(checkOutMon, checkOutDay, checkOutYear, validDatesLabel))
        {
            reservationButton.setEnabled(false);
            return;
        }

        validDatesLabel.setText("");
        guestPanel.updateCheckIn(checkInMon, checkInDay, checkInYear);
        guestPanel.updateCheckOut(checkOutMon, checkOutDay, checkOutYear);

        DatabaseHandle handle = guestPanel.getHandle();
        
        while(checkInBeforeCheckOut(checkOutMon, checkOutDay, checkOutYear))
        {
            String curDate = createDate(checkMon, checkDay, checkYear);
            handle.createStatement();
            ResultSet resultSet =
                    handle.executeQuery(("SELECT * from Rooms R, Reservations Res " + 
                                        "where Res.RoomId = R.Id " + 
                                        "AND Res.CheckInDate <= " + 
                                        curDate + 
                                        "AND Res.CheckOutDate > " + 
                                        curDate + 
                                        "AND R.Id = '" + guestPanel.getRoomIdLabel() + "'"
                                        ));
            try
            {
                //Occupied
                if (resultSet.next())                
                {
                    model.addRow(new Object[]{checkMon + "/" + checkDay + "/"+ checkYear,
                        "Occupied", 0});
                    setReservation = false;
                }
                //Open
                else
                {
                    model.addRow(new Object[]{checkMon + "/" + checkDay + "/"+ checkYear,
                        "Available", guestPanel.truncateDouble(getRate())});
                }
            }
            catch (SQLException ex)
            {
                System.out.println(ex);
            }
            // System.out.println(checkMon + " " + checkDay + " " + checkYear);
            incrementDate();
        }
        
        if(setReservation)
        {
            reservationButton.setEnabled(true);
        }
        else
        {
            reservationButton.setEnabled(false);
        }
    }//GEN-LAST:event_checkButtonActionPerformed

    private void reservationButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_reservationButtonActionPerformed
    {//GEN-HEADEREND:event_reservationButtonActionPerformed
        guestPanel.setRate(highestRate);
        guestPanel.setRoom(guestPanel.getAvailableRoom());
        
        CompleteReservation reservation = new CompleteReservation(null, true, guestPanel);
        reservation.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_reservationButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkButton;
    private javax.swing.JSpinner checkInDaySpinner;
    private javax.swing.JSpinner checkInMonthSpinner;
    private javax.swing.JSpinner checkInYearSpinner;
    private javax.swing.JSpinner checkOutDaySpinner;
    private javax.swing.JSpinner checkOutMonthSpinner;
    private javax.swing.JSpinner checkOutYearSpinner;
    private javax.swing.JTable dateTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reservationButton;
    private javax.swing.JLabel validDatesLabel;
    // End of variables declaration//GEN-END:variables
}
